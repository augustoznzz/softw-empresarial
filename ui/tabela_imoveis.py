#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Tabela de im√≥veis com filtros e ordena√ß√£o
"""

import logging
from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QTableWidget, 
                               QTableWidgetItem, QHeaderView, QLabel, QPushButton,
                               QGroupBox, QFrame, QMessageBox, QFileDialog)
from PySide6.QtCore import Signal, Qt
from PySide6.QtGui import QFont, QColor, QPalette

from models.imovel import Imovel
from models.database import DatabaseManager
from utils.formatacao import formatar_moeda
from services.calculo_service import CalculoService
from services.export_service import ExportService

class TabelaImoveis(QWidget):
    imovel_selecionado = Signal(Imovel)
    
    def __init__(self):
        super().__init__()
        self.db_manager = DatabaseManager()
        self.calculo_service = CalculoService()
        self.export_service = ExportService()
        self.imoveis = []
        self.imoveis_filtrados = []
        self.imovel_selecionado_atual = None
        self.setup_ui()
        self.setup_connections()
        self.carregar_imoveis()
        
    def setup_ui(self):
        """Configura a interface da tabela de im√≥veis"""
        layout = QVBoxLayout()
        self.setLayout(layout)
        
        # Estilo moderno para o widget
        self.setStyleSheet("""
            QWidget {
                background-color: white;
                font-family: 'Segoe UI', Arial, sans-serif;
            }
            QGroupBox {
                font-weight: bold;
                border: 2px solid #e9ecef;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
                background-color: white;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 8px 0 8px;
                color: #495057;
            }
            QLabel {
                color: #495057;
                font-weight: 500;
            }
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #007bff, stop:1 #0056b3);
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 6px;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #0056b3, stop:1 #004085);
            }
            QPushButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #004085, stop:1 #003d7a);
            }
        """)
        
        # Cabe√ßalho da tabela
        header_widget = QWidget()
        header_layout = QHBoxLayout(header_widget)
        header_layout.setContentsMargins(0, 0, 0, 0)
        
        # T√≠tulo
        title_label = QLabel("üìã Lista de Im√≥veis")
        title_label.setStyleSheet("""
            QLabel {
                font-size: 18px;
                font-weight: bold;
                color: #495057;
            }
        """)
        header_layout.addWidget(title_label)
        
        header_layout.addStretch()
        
        # Bot√µes de a√ß√£o
        self.btn_novo = QPushButton("‚ûï Novo Im√≥vel")
        self.btn_novo.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #27ae60, stop:1 #2ecc71);
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 6px;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #2ecc71, stop:1 #27ae60);
            }
        """)
        header_layout.addWidget(self.btn_novo)
        
        self.btn_editar = QPushButton("‚úèÔ∏è Editar")
        self.btn_editar.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #f39c12, stop:1 #e67e22);
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 6px;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #e67e22, stop:1 #f39c12);
            }
        """)
        header_layout.addWidget(self.btn_editar)
        
        self.btn_excluir = QPushButton("üóëÔ∏è Excluir")
        self.btn_excluir.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #e74c3c, stop:1 #c0392b);
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 6px;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #c0392b, stop:1 #a93226);
            }
        """)
        header_layout.addWidget(self.btn_excluir)
        
        # Bot√µes de exporta√ß√£o
        self.btn_export_pdf = QPushButton("üìÑ PDF")
        self.btn_export_excel = QPushButton("üìä Excel")
        
        header_layout.addWidget(self.btn_export_pdf)
        header_layout.addWidget(self.btn_export_excel)
        
        layout.addWidget(header_widget)
        
        # Tabela
        self.tabela = QTableWidget()
        self.tabela.setStyleSheet("""
            QTableWidget {
                background-color: white;
                alternate-background-color: #f8f9fa;
                gridline-color: #dee2e6;
                border: 2px solid #e9ecef;
                border-radius: 8px;
                font-size: 11px;
            }
            QTableWidget::item {
                padding: 12px 8px;
                border-bottom: 1px solid #f1f3f4;
            }
            QTableWidget::item:selected {
                background-color: #000000 !important;
                color: #ffffff !important;
            }
            QTableWidget::item:selected:active {
                background-color: #000000 !important;
                color: #ffffff !important;
            }
            QTableWidget::item:hover {
                background-color: #e3f2fd;
            }
            QHeaderView::section {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #f8f9fa, stop:1 #e9ecef);
                color: #495057;
                padding: 16px 8px;
                border: none;
                border-bottom: 2px solid #dee2e6;
                font-weight: bold;
                font-size: 12px;
            }
            QHeaderView::section:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #e9ecef, stop:1 #dee2e6);
            }
        """)
        
        # Configurar cabe√ßalhos - Removido ID e endere√ßo, mantido apenas CEP
        headers = [
            "CEP", "Cidade", "Estado", 
            "Custo Total (R$)", "Pre√ßo Estimado (R$)", "Margem (R$)", "ROI (%)"
        ]
        self.tabela.setColumnCount(len(headers))
        self.tabela.setHorizontalHeaderLabels(headers)
        
        # Configurar comportamento da tabela
        self.tabela.setAlternatingRowColors(True)
        self.tabela.setSelectionBehavior(QTableWidget.SelectRows)
        self.tabela.setSelectionMode(QTableWidget.SingleSelection)
        self.tabela.setSortingEnabled(True)
        
        # Configurar altura m√≠nima para mostrar pelo menos 5 linhas (aumentada em 15%)
        self.tabela.setMinimumHeight(250)  # Altura m√≠nima aumentada para acomodar c√©lulas mais altas
        self.tabela.verticalHeader().setDefaultSectionSize(50)  # Altura de cada linha aumentada para 50px
        
        # Ajustar tamanhos das colunas
        header = self.tabela.horizontalHeader()
        # header.setStretchLastSection(True)  # Removido para permitir largura fixa no ROI
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)  # CEP
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)  # Cidade
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)  # Estado
        header.setSectionResizeMode(3, QHeaderView.Stretch)  # Custo Total - se expande
        header.setSectionResizeMode(4, QHeaderView.Stretch)  # Pre√ßo Estimado - se expande
        header.setSectionResizeMode(5, QHeaderView.Stretch)  # Margem - se expande
        header.setSectionResizeMode(6, QHeaderView.Fixed)  # ROI (%) com largura fixa
        header.resizeSection(6, 90) # Largura fixa de 90px para a coluna ROI (redu√ß√£o de ~70% de um tamanho esticado)
        
        # Conectar sinais
        self.tabela.itemSelectionChanged.connect(self.on_selecao_alterada)
        
        layout.addWidget(self.tabela)
        
        # Status da tabela
        self.status_label = QLabel("Nenhum im√≥vel carregado")
        self.status_label.setStyleSheet("""
            QLabel {
                color: #6c757d;
                font-style: italic;
                padding: 10px;
                text-align: center;
            }
        """)
        self.status_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.status_label)
        
    def setup_connections(self):
        """Configura as conex√µes dos bot√µes"""
        # Conectar bot√µes de a√ß√£o
        self.btn_novo.clicked.connect(self.novo_imovel)
        self.btn_editar.clicked.connect(self.editar_imovel)
        self.btn_excluir.clicked.connect(self.excluir_imovel)
        
        # Conectar bot√µes de exporta√ß√£o
        self.btn_export_pdf.clicked.connect(self.exportar_pdf)
        self.btn_export_excel.clicked.connect(self.exportar_excel)
        
        # Habilitar/desabilitar bot√µes baseado na sele√ß√£o
        self.atualizar_botoes()
        
    def carregar_imoveis(self):
        """Carrega todos os im√≥veis do banco"""
        try:
            query = """
                SELECT id, endereco, cidade, estado, cep, metragem, 
                       custo_aquisicao, custos_reforma, custos_transacao
                FROM imoveis 
                ORDER BY cidade, cep
            """
            results = self.db_manager.execute_query(query)
            
            self.imoveis = []
            for row in results:
                imovel = Imovel(
                    id=row[0], endereco=row[1], cidade=row[2], estado=row[3],
                    cep=row[4], metragem=row[5], quartos=0, banheiros=0,
                    ano=2020, padrao_acabamento="medio", custo_aquisicao=row[6],
                    custos_reforma=row[7], custos_transacao=row[8], status="em_analise"
                )
                self.imoveis.append(imovel)
            
            self.imoveis_filtrados = self.imoveis.copy()
            self.atualizar_tabela()
            self.status_label.setText(f"{len(self.imoveis)} im√≥veis carregados")
            
        except Exception as e:
            logging.error(f"Erro ao carregar im√≥veis: {e}")
            self.status_label.setText("Erro ao carregar im√≥veis")
            
    def atualizar_tabela(self):
        """Atualiza a tabela com os im√≥veis filtrados"""
        self.tabela.setRowCount(len(self.imoveis_filtrados))
        
        for row, imovel in enumerate(self.imoveis_filtrados):
            # Calcular valores financeiros
            calculos = self.calculo_service.calcular_tudo(imovel)
            
            # CEP (agora na posi√ß√£o 0)
            self.tabela.setItem(row, 0, QTableWidgetItem(imovel.cep))
            
            # Cidade (agora na posi√ß√£o 1)
            self.tabela.setItem(row, 1, QTableWidgetItem(imovel.cidade))
            
            # Estado (agora na posi√ß√£o 2)
            self.tabela.setItem(row, 2, QTableWidgetItem(imovel.estado))
            
            # Custo Total (agora na posi√ß√£o 3)
            custo_total = calculos['custo_total']
            self.tabela.setItem(row, 3, QTableWidgetItem(formatar_moeda(custo_total)))
            
            # Pre√ßo Estimado (agora na posi√ß√£o 4)
            preco_estimado = calculos['preco_venda_estimado']
            self.tabela.setItem(row, 4, QTableWidgetItem(formatar_moeda(preco_estimado)))
            
            # Margem (agora na posi√ß√£o 5)
            margem = calculos['margem']
            margem_item = QTableWidgetItem(formatar_moeda(margem))
            if margem > 0:
                margem_item.setBackground(QColor(220, 255, 220))  # Verde claro
            elif margem < 0:
                margem_item.setBackground(QColor(255, 220, 220))  # Vermelho claro
            else:
                margem_item.setBackground(QColor(255, 255, 220))  # Amarelo claro
            self.tabela.setItem(row, 5, margem_item)
            
            # ROI (agora na posi√ß√£o 6)
            roi = calculos['roi']
            roi_item = QTableWidgetItem(f"{roi:.1f}%")
            if roi > 20:
                roi_item.setBackground(QColor(220, 255, 220))  # Verde claro
            elif roi < 0:
                roi_item.setBackground(QColor(255, 220, 220))  # Vermelho claro
            else:
                roi_item.setBackground(QColor(255, 255, 220))  # Amarelo claro
            self.tabela.setItem(row, 6, roi_item)
            
    def aplicar_filtros(self, filtros):
        """Aplica filtros √† lista de im√≥veis"""
        self.imoveis_filtrados = []
        
        for imovel in self.imoveis:
            if self.imovel_atende_filtros(imovel, filtros):
                self.imoveis_filtrados.append(imovel)
        
        self.atualizar_tabela()
        self.status_label.setText(f"{len(self.imoveis_filtrados)} im√≥veis encontrados")
        
    def imovel_atende_filtros(self, imovel, filtros):
        """Verifica se um im√≥vel atende aos filtros aplicados"""
        # Busca por CEP
        if 'cep' in filtros and filtros['cep']:
            cep_busca = filtros['cep'].replace('-', '').replace('.', '')  # Remove formata√ß√£o
            cep_imovel = imovel.cep.replace('-', '').replace('.', '')  # Remove formata√ß√£o
            if cep_busca not in cep_imovel:
                return False
        
        # Filtro por regi√£o
        if 'regiao' in filtros and filtros['regiao'] != "Todas as regi√µes":
            if not self.imovel_pertence_regiao(imovel, filtros['regiao']):
                return False
        
        # Filtro por cidade
        if 'cidade' in filtros and filtros['cidade'] != "Todas as cidades":
            if imovel.cidade != filtros['cidade']:
                return False
        
        # Filtro por estado
        if 'estado' in filtros:
            if imovel.estado != filtros['estado']:
                return False
        
        # Filtros de status e padr√£o removidos
        
        # Todos os filtros num√©ricos removidos
        
        # Filtros avan√ßados removidos
        
        return True
        
    def imovel_pertence_regiao(self, imovel, regiao):
        """Verifica se um im√≥vel pertence a uma regi√£o espec√≠fica"""
        # Mapeamento de cidades para regi√µes em Santa Catarina
        regioes = {
            "Norte": ["Joinville", "S√£o Francisco do Sul", "Itapo√°", "Araquari", "Garuva", "Itaja√≠", "Balne√°rio Cambori√∫", "Navegantes", "Penha", "Pi√ßarras", "Itapema", "Bombinhas", "Porto Belo", "Tijucas", "Bigua√ßu", "S√£o Jos√©", "Palho√ßa", "Paulo Lopes", "Garopaba", "Imbituba", "Laguna", "Tubar√£o", "Crici√∫ma", "I√ßara", "Urussanga", "Sider√≥polis", "Nova Veneza", "Forquilhinha", "Meleiro", "Morro da Fuma√ßa", "Cocal do Sul", "Ermo", "Jaguaruna", "Pedras Grandes", "Treze de Maio", "S√£o Ludgero", "Bra√ßo do Norte", "Gr√£o Par√°", "Orleans", "Lauro M√ºller", "Urubici", "Bom Jardim da Serra", "S√£o Joaquim", "Bom Retiro", "Ponte Alta", "Urupema", "Lages", "Otac√≠lio Costa", "Bocaina do Sul", "S√£o Jos√© do Cerrito", "Ponte Alta do Norte", "Curitibanos", "Ponte Alta do Sul", "Brun√≥polis", "Campos Novos", "Abelardo Luz", "Coronel Martins", "Entre Rios", "Galv√£o", "Ipua√ßu", "Jupi√°", "Lacerd√≥polis", "Lajeado Grande", "Marema", "Ouro Verde", "Passos Maia", "Varge√£o", "Xanxer√™", "Xaxim", "√Åguas de Chapec√≥", "√Åguas Frias", "Bandeirante", "Barra Bonita", "Belmonte", "Bom Jesus do Oeste", "Caibi", "Campo Er√™", "Caxambu do Sul", "Chapec√≥", "Cordilheira Alta", "Cunha Por√£", "Cunhata√≠", "Flor do Sert√£o", "Formosa do Sul", "Guatambu", "Irati", "Jardin√≥polis", "Maravilha", "Modelo", "Nova Erechim", "Nova Itaberaba", "Palmitos", "Pinhalzinho", "Planalto Alegre", "Quilombo", "Riqueza", "Romel√¢ndia", "Saltinho", "Santa Terezinha do Progresso", "Santiago do Sul", "S√£o Bernardino", "S√£o Carlos", "S√£o Louren√ßo do Oeste", "Saudades", "Serra Alta", "Sul Brasil", "Tigrinhos", "Tun√°polis", "Uni√£o do Oeste", "Vidal Ramos", "Videira", "Arroio Trinta", "Ca√ßador", "Calmon", "Catanduvas", "Erval Velho", "Fraiburgo", "Herval d'Oeste", "Ibiam", "Ibicar√©", "Iomer√™", "Jabor√°", "Lebon R√©gis", "Lind√≥ia do Sul", "Luzerna", "Macieira", "Matos Costa", "Ouro", "Pinheiro Preto", "Rio das Antas", "Salto Veloso", "Tangar√°", "Treze T√≠lias", "Vargem Bonita", "Zort√©a"],
            "Sul": ["Ararangu√°", "Balne√°rio Arroio do Silva", "Balne√°rio Gaivota", "Balne√°rio Rinc√£o", "Balne√°rio Cambori√∫", "Bombinhas", "Botuver√°", "Bra√ßo do Norte", "Brusque", "Cambori√∫", "Crici√∫ma", "Ermo", "Forquilhinha", "Gaspar", "Guabiruba", "I√ßara", "Imbituba", "Itaja√≠", "Itapema", "Jaguaruna", "Laguna", "Meleiro", "Morro da Fuma√ßa", "Navegantes", "Nova Veneza", "Orleans", "Palho√ßa", "Paulo Lopes", "Penha", "Pi√ßarras", "Porto Belo", "Sang√£o", "S√£o Jo√£o Batista", "S√£o Jos√©", "Sider√≥polis", "Tijucas", "Tubar√£o", "Urussanga"],
            "Leste": ["Balne√°rio Cambori√∫", "Balne√°rio Pi√ßarras", "Bombinhas", "Cambori√∫", "Garopaba", "Imbituba", "Itaja√≠", "Itapema", "Laguna", "Navegantes", "Palho√ßa", "Paulo Lopes", "Penha", "Pi√ßarras", "Porto Belo", "S√£o Jos√©", "Tijucas"],
            "Oeste": ["Abelardo Luz", "√Åguas de Chapec√≥", "√Åguas Frias", "Bandeirante", "Barra Bonita", "Belmonte", "Bom Jesus do Oeste", "Caibi", "Campo Er√™", "Caxambu do Sul", "Chapec√≥", "Cordilheira Alta", "Cunha Por√£", "Cunhata√≠", "Dion√≠sio Cerqueira", "Entre Rios", "Flor do Sert√£o", "Formosa do Sul", "Galv√£o", "Guatambu", "Guaraciaba", "Guaruj√° do Sul", "Irati", "Iraceminha", "Itapiranga", "Jardin√≥polis", "Joa√ßaba", "Lacerd√≥polis", "Lajeado Grande", "Marema", "Maravilha", "Monda√≠", "Modelo", "Nova Erechim", "Nova Itaberaba", "Nova Veneza", "Ouro Verde", "Palmitos", "Para√≠so", "Passos Maia", "Peritiba", "Pinhalzinho", "Pinheiro Preto", "Planalto Alegre", "Quilombo", "Rio das Antas", "Riqueza", "Romel√¢ndia", "Saltinho", "Santa Terezinha do Progresso", "Santiago do Sul", "S√£o Bernardino", "S√£o Carlos", "S√£o Domingos", "S√£o Jo√£o do Oeste", "S√£o Jos√© do Cedro", "S√£o Louren√ßo do Oeste", "S√£o Miguel da Boa Vista", "S√£o Miguel do Oeste", "Saudades", "Serra Alta", "Sul Brasil", "Tigrinhos", "Tun√°polis", "Uni√£o do Oeste", "Vidal Ramos", "Videira", "Xanxer√™", "Xaxim", "Zort√©a", "Capinzal"],
            "Central": ["Alfredo Wagner", "Anita Garibaldi", "Bom Jardim da Serra", "Bom Retiro", "Botuver√°", "Bra√ßo do Norte", "Brun√≥polis", "Campos Novos", "Catanduvas", "Celso Ramos", "Correia Pinto", "Curitibanos", "Erval Velho", "Fraiburgo", "Frei Rog√©rio", "Herval d'Oeste", "Ibiam", "Ibicar√©", "Iomer√™", "Jabor√°", "Lacerd√≥polis", "Lages", "Lebon R√©gis", "Lind√≥ia do Sul", "Luzerna", "Macieira", "Matos Costa", "Monte Carlo", "Ouro", "Painel", "Palmeira", "Ponte Alta", "Ponte Alta do Norte", "Ponte Alta do Sul", "Rio Rufino", "Salto Veloso", "Santa Cec√≠lia", "S√£o Joaquim", "S√£o Jos√© do Cerrito", "Tangar√°", "Treze T√≠lias", "Urupema", "Vargem Bonita", "Videira", "Zort√©a"]
        }
        
        if regiao in regioes:
            return imovel.cidade in regioes[regiao]
        return False
        
    def on_selecao_alterada(self):
        """Chamado quando a sele√ß√£o da tabela √© alterada"""
        current_row = self.tabela.currentRow()
        if current_row >= 0 and current_row < len(self.imoveis_filtrados):
            imovel_selecionado = self.imoveis_filtrados[current_row]
            self.imovel_selecionado_atual = imovel_selecionado
            self.imovel_selecionado.emit(imovel_selecionado)
        else:
            self.imovel_selecionado_atual = None
        self.atualizar_botoes()
        
    def atualizar_botoes(self):
        """Atualiza o estado dos bot√µes baseado na sele√ß√£o"""
        tem_selecao = self.imovel_selecionado_atual is not None
        self.btn_editar.setEnabled(tem_selecao)
        self.btn_excluir.setEnabled(tem_selecao)
        
    def novo_imovel(self):
        """Abre o formul√°rio para criar um novo im√≥vel"""
        try:
            from ui.imovel_form import ImovelForm
            
            self.form_dialog = ImovelForm()
            self.form_dialog.imovel_salvo.connect(self.on_imovel_salvo)
            self.form_dialog.setWindowTitle("Novo Im√≥vel")
            self.form_dialog.show()
            
        except Exception as e:
            logging.error(f"Erro ao abrir formul√°rio de novo im√≥vel: {e}")
            QMessageBox.critical(self, "Erro", f"Erro ao abrir formul√°rio: {str(e)}")
            
    def editar_imovel(self):
        """Abre o formul√°rio para editar o im√≥vel selecionado"""
        if not self.imovel_selecionado_atual:
            QMessageBox.warning(self, "Aviso", "Selecione um im√≥vel para editar.")
            return
            
        try:
            from ui.imovel_form import ImovelForm
            
            self.form_dialog = ImovelForm()
            self.form_dialog.imovel_salvo.connect(self.on_imovel_salvo)
            self.form_dialog.load_imovel(self.imovel_selecionado_atual)
            self.form_dialog.setWindowTitle(f"Editar Im√≥vel - {self.imovel_selecionado_atual.cidade}")
            self.form_dialog.show()
            
        except Exception as e:
            logging.error(f"Erro ao abrir formul√°rio de edi√ß√£o: {e}")
            QMessageBox.critical(self, "Erro", f"Erro ao abrir formul√°rio: {str(e)}")
            
    def excluir_imovel(self):
        """Exclui o im√≥vel selecionado"""
        if not self.imovel_selecionado_atual:
            QMessageBox.warning(self, "Aviso", "Selecione um im√≥vel para excluir.")
            return
            
        # Confirmar exclus√£o
        resposta = QMessageBox.question(
            self, 
            "Confirmar Exclus√£o", 
            f"Tem certeza que deseja excluir o im√≥vel em {self.imovel_selecionado_atual.cidade}?\n\n"
            f"CEP: {self.imovel_selecionado_atual.cep}\n"
            f"Esta a√ß√£o n√£o pode ser desfeita.",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if resposta == QMessageBox.Yes:
            try:
                # Excluir do banco
                query = "DELETE FROM imoveis WHERE id = ?"
                self.db_manager.execute_query(query, (self.imovel_selecionado_atual.id,))
                
                # Recarregar tabela
                self.carregar_imoveis()
                
                QMessageBox.information(self, "Sucesso", "Im√≥vel exclu√≠do com sucesso!")
                
            except Exception as e:
                logging.error(f"Erro ao excluir im√≥vel: {e}")
                QMessageBox.critical(self, "Erro", f"Erro ao excluir im√≥vel: {str(e)}")
                
    def exportar_pdf(self):
        """Exporta os dados filtrados para PDF"""
        try:
            # Verificar se h√° dados para exportar
            if not self.imoveis_filtrados:
                QMessageBox.warning(self, "Aviso", "N√£o h√° dados para exportar.")
                return
                
            # Selecionar arquivo de destino
            arquivo, _ = QFileDialog.getSaveFileName(
                self,
                "Salvar Relat√≥rio PDF",
                f"relatorio_imoveis_{len(self.imoveis_filtrados)}_items.pdf",
                "Arquivos PDF (*.pdf)"
            )
            
            if arquivo:
                # Exportar
                sucesso = self.export_service.export_to_pdf(self.imoveis_filtrados, arquivo)
                
                if sucesso:
                    QMessageBox.information(
                        self, 
                        "Sucesso", 
                        f"Relat√≥rio PDF exportado com sucesso!\n\n"
                        f"Arquivo: {arquivo}\n"
                        f"Im√≥veis: {len(self.imoveis_filtrados)}"
                    )
                else:
                    QMessageBox.critical(self, "Erro", "Erro ao exportar para PDF.")
                    
        except Exception as e:
            logging.error(f"Erro na exporta√ß√£o PDF: {e}")
            QMessageBox.critical(self, "Erro", f"Erro na exporta√ß√£o PDF: {str(e)}")
            
    def exportar_excel(self):
        """Exporta os dados filtrados para Excel"""
        try:
            # Verificar se h√° dados para exportar
            if not self.imoveis_filtrados:
                QMessageBox.warning(self, "Aviso", "N√£o h√° dados para exportar.")
                return
                
            # Selecionar arquivo de destino
            arquivo, _ = QFileDialog.getSaveFileName(
                self,
                "Salvar Planilha Excel",
                f"imoveis_detalhado_{len(self.imoveis_filtrados)}_items.xlsx",
                "Arquivos Excel (*.xlsx)"
            )
            
            if arquivo:
                # Exportar
                sucesso = self.export_service.export_to_excel(self.imoveis_filtrados, arquivo)
                
                if sucesso:
                    QMessageBox.information(
                        self, 
                        "Sucesso", 
                        f"Planilha Excel exportada com sucesso!\n\n"
                        f"Arquivo: {arquivo}\n"
                        f"Im√≥veis: {len(self.imoveis_filtrados)}"
                    )
                else:
                    QMessageBox.critical(self, "Erro", "Erro ao exportar para Excel.")
                    
        except Exception as e:
            logging.error(f"Erro na exporta√ß√£o Excel: {e}")
            QMessageBox.critical(self, "Erro", f"Erro na exporta√ß√£o Excel: {str(e)}")
            
    def on_imovel_salvo(self, imovel):
        """Chamado quando um im√≥vel √© salvo"""
        # Recarregar a tabela para mostrar as mudan√ßas
        self.carregar_imoveis()
        
        # Fechar o formul√°rio se ele ainda existir
        if hasattr(self, 'form_dialog'):
            self.form_dialog.close()
